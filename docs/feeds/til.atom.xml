<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Saqibur's Notes - TIL</title><link href="https://notes.saqibur.com/" rel="alternate"></link><link href="https://notes.saqibur.com/feeds/til.atom.xml" rel="self"></link><id>https://notes.saqibur.com/</id><updated>2023-09-17T00:00:00+06:00</updated><entry><title>TIL: How LangChain makes it easy to interact with LLMs</title><link href="https://notes.saqibur.com/til-how-langchains-interact-with-llms.html" rel="alternate"></link><published>2023-09-17T00:00:00+06:00</published><updated>2023-09-17T00:00:00+06:00</updated><author><name>Saqibur Rahman</name></author><id>tag:notes.saqibur.com,2023-09-17:/til-how-langchains-interact-with-llms.html</id><summary type="html">&lt;p&gt;A quick look at what I learned when adopting an LLM use-case at a work project&lt;/p&gt;</summary><content type="html">&lt;h2&gt;A summary of my studies&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LangChain&lt;/code&gt; provides a "sensible" framework that does a lot of heavy lifting for
us - &lt;a href="https://news.ycombinator.com/item?id=34422627"&gt;LangChain: Build AI apps with LLMs through composability&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Seems like it's also a widely adopted (across different tech companies)
approach for the last few months at least&lt;/li&gt;
&lt;li&gt;Two main advantages backend devs, it can directly integrate;&lt;ul&gt;
&lt;li&gt;with your database with a &lt;a href="https://python.langchain.com/docs/use_cases/qa_structured/sql"&gt;SQLChain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;with your API with an &lt;a href="https://python.langchain.com/docs/use_cases/apis"&gt;APIChain&lt;/a&gt;. It's easy
enough that if you provide it with a standard OpenAPI schema, it's able to
understand which API to call and fetch data from to answer the question&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;You can think of it like writing a step-by-step, repeatable flow for interacting
  with an LLM in a very iteration friendly way (you can build on your prompts
  and templates quite easily) - that is, composing a bunch of different
  prompts/instructions and chaining them together into a desirable outcome. What
  it does boil down to, at a super high-level, is a
  &lt;a href="https://airflow.apache.org/docs/apache-airflow/stable/core-concepts/dags.html"&gt;DAG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;One thing to note, it's not restricted to OpenAI, but rather can be tweaked to
work with other models as well - for instance, open source models available on
hugging face.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Counter-points&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;LangChain&lt;/code&gt; is essentially an abstraction over how you'd normally query LLMs -
so while it doesn't do anything fancy (and in rare cases, cannot be used for
super customised integrations), it does get the job done in most
application-specific use cases. Some rants on Hacker News on why it "sucks":&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=36725982"&gt;The problem with LangChain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://news.ycombinator.com/item?id=36645575"&gt;LangChain is pointless&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- ## Examples (via screenshots): TODO.
- The first screenshot shows what I got after asking my "API" about "myself"
- The second shows what I got when asking about "me" and the APIChain correctly hits the me API that I have
- The third screenshot shows what I got when asking about my phone number
- Just a general question about the missions we have in the system --&gt;

&lt;h3&gt;Case:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.klarna.com/international/press/klarna-brings-smoooth-shopping-to-chatgpt/"&gt;Klarna&lt;/a&gt;
has a nice documentation and implementation of this (LangChain refers to this in their docs)&lt;/li&gt;
&lt;/ul&gt;
&lt;h6&gt;References:&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python.langchain.com/docs/get_started/introduction"&gt;Intro to LangChain&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://python.langchain.com/docs/use_cases/apis"&gt;Interacting with APIs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><category term="TIL"></category><category term="langchain"></category><category term="python"></category><category term="generative-ai"></category><category term="llm"></category></entry></feed>